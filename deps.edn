;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{
 ;; Paths
 ;;   Directories in the current project to include in the classpath

 ;; :paths ["src"]

 ;; External dependencies

 ;; :deps {
 ;;   org.clojure/clojure {:mvn/version "1.10.1"}
 ;; }

 ;; Aliases
 ;;   resolve-deps aliases (-R) affect dependency resolution, options:
 ;;     :extra-deps - specifies extra deps to add to :deps
 ;;     :override-deps - specifies a coordinate to use instead of that in :deps
 ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
 ;;   make-classpath aliases (-C) affect the classpath generation, options:
 ;;     :extra-paths - vector of additional paths to add to the classpath
 ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

 ;; :aliases {
 ;;   :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version "0.6.496"}}}
 ;;   :test {:extra-paths ["test"]}
 ;; }

 :aliases
 {

  ;; project creation from templates:
  ;; - see https://github.com/seancorfield/clj-new
  ;; - create an application project:
  ;;   - clj -A:new app myname/myapp
  ;;   - cd myapp
  ;;   - clj -m myname.myapp # run it!
  ;;   - clj -A:test:runner # run the tests!
  ;; - create a library project:
  ;;   - clj -A:new lib myname/my-cool-lib
  ;;   - cd my-cool-lib
  ;;   - clj -A:test:runner # run the tests!
  :new
  {:extra-deps {seancorfield/clj-new {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "clj-new.create"]}


  ;; REPL experience
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; run a repl with syntax highlighting, built in docs and a proper quit command, `:repl/quit`
  :rebel
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "rebel-readline.main"]}


  ;; Hot loading dependencies
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; to get access to clojure.tools.deps.alpha.repl/add-lib
  ;; - now you can add new deps to a running REPL:
  ;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
  ;; (add-lib 'some/library {:mvn/version "RELEASE"})
  ;; - and you can git deps too; here's how to get the master version of a lib:
  ;; (require '[clojure.tools.gitlibs :as gitlibs])
  ;; (defn load-master [lib]
  ;;   (let [git (str "https://github.com/" lib ".git")]
  ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
  ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
  ;; (load-master 'clojure/tools.trace)
  :deps
  {:extra-deps {org.clojure/tools.deps.alpha
                {:git/url "https://github.com/clojure/tools.deps.alpha"
                 :sha     "148cab8f154711f8495bd632ebdc53a14dff7f09"}}}


  ;; Testing frameworks
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Clojure.test

  ;; midge

  ;; Clojure spec



  ;; Clojure spec 2 - under active developent
  :spec2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha     "2a0a7c49c86e31b528be857ed004a4931a0c2551"}}}


  ;; - see https://github.com/clojure-expectations/expectations
  ;; - and https://github.com/clojure-expectations/clojure-test
  ;; - run your expectations: clj -A:test:expect:test-runner (using cognitect test runner)

  :expect
  {:extra-deps {expectations              {:mvn/version "RELEASE"}
                expectations/clojure-test {:mvn/version "RELEASE"}}}




  ;; Test runners
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Cognitect test-runner
  :test-runner
  {:extra-deps {com.cognitect/test-runner
                {:git/url "https://github.com/cognitect-labs/test-runner"
                 :sha     "3cb0a9daf1cb746259dc8309b218f9211ad3b33b"}}
   :main-opts  ["-m" "cognitect.test-runner"
                "-d" "test"
                "-d" "src/test/clojure"]}

  ;; eftest - fast and pretty test runner
  ;; There may be a nicer way to do the main-opts - see the kibit issue discussion
  :eftest
  {:extra-paths ["test"]
   :extra-deps  {eftest {:mvn/version "0.5.9"}}
   :main-opts   ["-e"  "(require,'[eftest.runner,:refer,[find-tests,run-tests]]),(run-tests,(find-tests,\"test\"))"]}


  ;; kaocha - comprehensive test runner for Clojure/Script
  :kaocha
  {:extra-deps {lambdaisland/kaocha {:mvn/version "0.0-554"}}
   :main-opts  ["-m" "kaocha.runner"]}

  ;; Eastwood
  ;; https://github.com/jonase/eastwood#running-eastwood-in-a-repl
  :eastwood
  {:extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "eastwood.lint" "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}


  ;; kibit
  ;; https://github.com/jonase/kibit/issues/221
  :kibit
  {:extra-deps {tvaughan/kibit-runner {:mvn/version "0.1.0"}}
   :main-opts  ["-m" "kibit-runner.cmdline"]}


  ;; Dependency version management
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Manage versions for maven and git dependencies
  ;; https://github.com/Olical/depot
  :outdated
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"]}

  ;; clj -A:outdated --update
  ;; or
  ;; clj -A:outdated-update
  :outdated-update
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"
                "--update"]}

  :ancient
  {:extra-deps {deps-ancient {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "deps-ancient.deps-ancient"]}



  ;; Performance testing
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; https://github.com/hugoduncan/criterium/
  ;; clojure -A:rebel:bench
  ;; (require '[criterium.core :refer [bench quick-bench]]) ; require criterium
  ;; (bench (adhoc-expression)) ; timing of a self contained expression
  ;;
  ;; (require '[practicalli/namespace-name]) ; require project code
  ;; (in-ns 'practicalli/namespace-name)
  ;; (quick-bench (project-function args))
  ;;
  ;; $HOME/.clojure/deps.edn
  :bench
  {:extra-deps {criterium {:mvn/version "RELEASE"}}}


  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as mm])
  ;; - (mm/measure (your-expression))
  :measure
  {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "RELEASE"}}}



  ;; Deployment
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  :jar
  {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "hf.depstar.jar"]}

  ;; uberjar
  ;; https://github.com/tonsky/uberdeps
  ;; "--target" "target/cdeps-0.1.0.jar" in `:main-opts` to specify output file
  :uberjar
  {:extra-deps {uberdeps {:mvn/version "0.1.6"}}
   :main-opts  ["-m" "uberdeps.uberjar"]}


  } ;; End of alias definitions


 ;; Provider attributes

 :mvn/repos {
             "central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}
             }
 }
